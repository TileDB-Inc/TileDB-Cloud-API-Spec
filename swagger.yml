swagger: "2.0"
info:
  description: TileDB Storage Platform REST API
  title: Tiledb Storage Platform API
  version: 0.0.25

produces:
- application/json
consumes:
- application/json

schemes:
- http
- https

basePath: /v1

securityDefinitions:
  BasicAuth:
    type: basic
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-TILEDB-REST-API-KEY

security:
  - BasicAuth: []
  - ApiKeyAuth: []

definitions:
  ArrayType:
    description: TileDB array type
    type: string
    enum: &ARRAYTYPE
      # Dense array
      - dense
      # Sparse array
      - sparse

  Datatype:
    description: TileDB data type
    type: string
    enum: &DATATYPE
      # 32-bit signed integer
      - INT32
      # 64-bit signed integer
      - INT64
      # 32-bit floating point value
      - FLOAT32
      # 64-bit floating point value
      - FLOAT64
      # Character
      - CHAR
      # 8-bit signed integer
      - INT8
      # 8-bit unsigned integer
      - UINT8
      # 16-bit signed integer
      - INT16
      # 16-bit unsigned integer
      - UINT16
      # 32-bit unsigned integer
      - UINT32
      # 64-bit unsigned integer
      - UINT64
      # ASCII string
      - STRING_ASCII
      # UTF-8 string
      - STRING_UTF8
      # UTF-16 string
      - STRING_UTF16
      # UTF-32 string
      - STRING_UTF32
      # UCS2 string
      - STRING_UCS2
      # UCS4 string
      - STRING_UCS4
      # This can be any datatype. Must store (type tag, value) pairs.
      - ANY

  Layout:
    description: Layout of array
    type: string
    enum: &LAYOUT
      # Row-major layout
      - row-major
      # Column-major layout
      - col-major
      # Global-order layout
      - global-order
      # Unordered layout
      - unordered

  Querytype:
    description: Type of query
    type: string
    enum: &QUERYTYPE
      # READ
      - READ
      # Write
      - WRITE

  Querystatus:
    description: Status of query
    type: string
    enum: &QUERYSTATUS
      # FAILED
      - FAILED
      # COMPLETED
      - COMPLETED
      # INPROGRESS
      - INPROGRESS
      # INCOMPLETE
      - INCOMPLETE
      # UNINITIALIZED
      - UNINITIALIZED

  EncryptionType:
    description: TileDB Encryption type
    type: string
    enum: &ENCRYPTIONTYPE
      # No encryption
      - NO_ENCRYPTION
      # AES-256-GCM encryption
      - AES_256_GCM

  FilterType:
    description: TileDB filter types
    type: string
    enum: &FILTERTYPE
       # No-op filter
      - FILTER_NONE
      # Gzip compressor
      - FILTER_GZIP
      # Zstandard compressor
      - FILTER_ZSTD
      # LZ4 compressor
      - FILTER_LZ4
      # Run-length encoding compressor
      - FILTER_RLE
      # Bzip2 compressor
      - FILTER_BZIP2
      # Double-delta compressor
      - FILTER_DOUBLE_DELTA
      # Bit width reduction filter.
      - FILTER_BIT_WIDTH_REDUCTION
      # Bitshuffle filter.
      - FILTER_BITSHUFFLE
      # Byteshuffle filter.
      - FILTER_BYTESHUFFLE
      # Positive-delta encoding filter.
      - FILTER_POSITIVE_DELTA

  FilterOption:
    description: TileDB filter option
    type: string
    enum: &FILTEROPTION
      # Compression level. Type: `int32_t`
      - COMPRESSION_LEVEL
      # Max window length for bit width reduction. Type: `uint32_t`
      - BIT_WIDTH_MAX_WINDOW
      # Max window length for positive-delta encoding. Type: `uint32_t`.
      - POSITIVE_DELTA_MAX_WINDOW

  OrganizationRoles:
    description: role user has in organization
    type: string
    enum: &ORGANIZATIONROLES
      # Owner/creator of group
      - owner
      # Admin almost all rights but can't delete organization
      - admin
      # User
      - user
      # Read Only User
      - read_only

  ArrayActions:
    description: actions a user can take on an array
    type: string
    enum: &ARRAYACTIONS
      # Read
      - read
      # write
      - write
      # edit metadata about array
      - edit

  DomainArray:
    description: Domain object for an array of each type
    type: object
    properties:
      int8:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: int8
      uint8:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: uint8
      int16:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: int16
      uint16:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: uint16
      int32:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: int32
      uint32:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: uint32
      int64:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: int64
      uint64:
        type: array
        x-omitempty: true
        items:
          type: integer
          format: uint64
      float32:
        type: array
        x-omitempty: true
        items:
          type: number
          format: float
      float64:
        type: array
        x-omitempty: true
        items:
          type: number
          format: double

  MaxBufferSize:
    description: Max buffer size for attribute
    type: object
    properties:
      bufferOffsetSize:
        description: size of buffer offsets
        type: number
        format: uint64
      bufferSize:
        description: size of buffer
        type: number
        format: uint64

  MapMaxBufferSizes:
    description: Map for max buffer sizes
    type: object
    properties:
      entries:
        description: entries in map
        type: array
        items:
          $ref: "#/definitions/MaxBufferSize"

  Array:
    description: Represents an open array
    type: object
    required:
      - timestamp
      - queryType
      - uri
    properties:
      timestamp:
        description: timestamp (epoch milliseconds) array is opened at
        type: number
        format: uint64
        example: 1540471791873
      encryptionKey:
        description: Key to use for encryption
        type: string
      encryptionType:
        description: Type of encryption used
        $ref: "#/definitions/EncryptionType"
      lastMaxBufferSizes:
        description: Last max buffer size
        $ref: "#/definitions/MapMaxBufferSizes"
      lastMaxBufferSizesSubarray:
        description: subarray's last max buffer size
        $ref: "#/definitions/DomainArray"
      queryType:
        description: Array opened for query type
        $ref: "#/definitions/Querytype"
      uri:
        description: Array uri
        type: string

  Attribute:
    description: Attribute of array
    type: object
    required:
      - name
      - type
      - filterPipeline
      - cellValNum
    properties:
      name:
        description: Attribute name
        type: string
        example: attribute1
      type:
        $ref: "#/definitions/Datatype"
      filterPipeline:
        $ref: "#/definitions/FilterPipeline"
      cellValNum:
        description: Attribute number of values per cell
        type: integer
        example: 1

  Dimension:
    description: Dimension of array
    type: object
    required:
      - type
      - domain
      - nullTileExtent
    properties:
      name:
        description: Dimension name
        type: string
        example: "row"
      type:
        $ref: "#/definitions/Datatype"
      domain:
        description: extent of domain
        $ref: "#/definitions/DomainArray"
      nullTileExtent:
        description: Is tile extent null
        type: boolean
        example: true
      tileExtent:
        description: Extent of tile
        type: object
        properties:
          int8:
            type: integer
            format: int8
          uint8:
            type: integer
            format: uint8
          int16:
            type: integer
            format: int16
          uint16:
            type: integer
            format: uint16
          int32:
            type: integer
            format: int32
          uint32:
            type: integer
            format: uint32
          int64:
            type: integer
            format: int64
          uint64:
            type: integer
            format: uint64
          float32:
            type: integer
            format: float
          float64:
            type: integer
            format: double

  Domain:
    description: Domain of array
    type: object
    required:
      - type
      - tileOrder
      - cellOrder
      - dimensions
    properties:
      type:
        $ref: "#/definitions/Datatype"
        description: Domain Type
      tileOrder:
        $ref: "#/definitions/Layout"
        description: Tile Order
      cellOrder:
        $ref: "#/definitions/Layout"
        description: Cell Order
      dimensions:
        type: array
        description: Array of dimensions
        items:
          $ref: "#/definitions/Dimension"

  Filter:
    description: Filter
    type: object
    required:
      - type
    properties:
      type:
        description: Filter type
        $ref: "#/definitions/FilterType"
      data:
        description: Filter data
        type: object
        properties:
          int8:
            type: integer
            format: int8
          uint8:
            type: integer
            format: uint8
          int16:
            type: integer
            format: int16
          uint16:
            type: integer
            format: uint16
          int32:
            type: integer
            format: int32
          uint32:
            type: integer
            format: uint32
          int64:
            type: integer
            format: int64
          uint64:
            type: integer
            format: uint64
          float32:
            type: integer
            format: float
          float64:
            type: integer
            format: double

  FilterPipeline:
    description: One or more filters to apply
    type: object
    properties:
      filters:
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/Filter"

  ArraySchema:
    description: ArraySchema during creation or retrevial
    type: object
    required:
      - version
      - arrayType
      - tileOrder
      - cellOrder
      - capacity
      - coordsFilterPipeline
      - offsetFilterPipeline
      - domain
      - attributes
    properties:
      uri:
        description: URI of schema
        type: string
        example: "s3://<bucket>/test_array"
      version:
        description: file format version
        type: array
        x-omitempty: true
        items:
          type: integer
        example: [1,3,0]
      arrayType:
        $ref: "#/definitions/ArrayType"
        description: Type of array
        example: sparse
      tileOrder:
        description: Tile order setting of array
        $ref: "#/definitions/Layout"
        example: row-major
      cellOrder:
        description: Order of cells
        $ref: "#/definitions/Layout"
        example: row-major
      capacity:
        description: Capacity of array
        type: integer
        format: uint64
        example: 100000
      coordsFilterPipeline:
        description: Filter pipeline used for coordinates (enum)
        $ref: "#/definitions/FilterPipeline"
      offsetFilterPipeline:
        description: Filter pipeline use for variable offsets (enum)
        $ref: "#/definitions/FilterPipeline"
      domain:
        description: Domain of array
        $ref: "#/definitions/Domain"
      attributes:
        description: Attributes of array
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/Attribute"
    x-go-type:
      import:
        package: "github.com/TileDB-Inc/TileDB-Go"
        alias: "tiledb"
      type: "ArraySchema"

  AttributeBuffer:
    description: Represents an attribute buffer
    type: object
    required:
      - buffer
    properties:
        type:
          description: Datatype of buffer
          type: string
          $ref: "#/definitions/Datatype"
          example: "INT32"
        buffer:
          description: value buffer
          type: object
          properties:
            int8:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int8
            uint8:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint8
            int16:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int16
            uint16:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint16
            int32:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int32
            uint32:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint32
            int64:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int64
            uint64:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint64
            float32:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: float
            float64:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: double
            char:
              type: array
              items:
                type: string
        bufferOffset:
          description: offset buffer for variable length attributes
          type: array
          x-omitempty: true
          items:
            type: integer
            format: uint64

  Writer:
    type: object
    properties:
      checkCoordDups:
        type: boolean
      dedupCoords:
        type: boolean
      initialized:
        type: boolean
      fragmentUri:
        type: string

  ReadState:
    description: state for reads
    type: object
    properties:
      initialized:
        description: True if the reader has been initialized.
        type: boolean
      overflowed:
        description: True if the query produced results that could not fit in some buffer.
        type: boolean

      curSubarrayPartition:
        description: The current subarray the query is constrained on.
        $ref: "#/definitions/DomainArray"

      subarrayPartitions:
        description: A list of subarray partitions. The head of the list is the partition to be split next.
        type: object
        properties:
          int8:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int8
          uint8:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint8
          int16:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int16
          uint16:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint16
          int32:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int32
          uint32:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint32
          int64:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: int64
          uint64:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: uint64
          float32:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: float
          float64:
            type: array
            x-omitempty: true
            items:
              type: array
              x-omitempty: true
              items:
                type: integer
                format: double

  QueryReader:
    description: Read struct (can't be called reader due to class name conflict)
    type: object
    properties:
      readState:
        description: To handle incomplete read queries.
        $ref: '#/definitions/ReadState'

  Query:
    type: object
    required:
      - type
      - buffers
      - layout
      - status
      - array
    properties:
      type:
        $ref: "#/definitions/Querytype"
      layout:
        $ref: "#/definitions/Layout"
      status:
        $ref: "#/definitions/Querystatus"
      subarray:
        description: Limit dense operations to these dimensions
        $ref: "#/definitions/DomainArray"
      buffers:
        description: map of buffers
        type: object
        additionalProperties:
          $ref: "#/definitions/AttributeBuffer"
      writer:
        description: writer contains data needed for continuation of global write order queries
        $ref: "#/definitions/Writer"
      reader:
        description: reader contains data needed for continuation of reads
        $ref: "#/definitions/QueryReader"
      array:
        description: Represents an open array
        $ref: "#/definitions/Array"
    x-go-type:
      import:
        package: "github.com/TileDB-Inc/TileDB-Go"
        alias: "tiledb"
      type: "Query"

  NonEmptyDomain:
    type: object
    description: object representing a non-empty domain
    required:
      - nonEmptyDomain
      - isEmpty
    properties:
      nonEmptyDomain:
        type: object
        description: Non Empty Dmoain of array
        additionalProperties:
          $ref: "#/definitions/DomainArray"
      isEmpty:
        description: Is non-empty domain really empty?
        type: boolean
        example: False

  MaxBufferSizeVar:
    description: Used to return max buffer/var buffer sizes for an array
    type: object
    required:
      - attribute
      - bufferSize
    properties:
      attribute:
        description: name of attribute
        type: string
        example: "attribute1"
      bufferSize:
        description: max size of a buffer for given subarray
        type: integer
        format: uint64
        example: 100
      bufferOffsetSize:
        description: max buffer offset for a given subarray
        type: integer
        format: uint64
        example: 4

  Error:
    type:  object
    required:
      - message
      - code
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string

  User:
    description: User
    type: object
    required:
      - username
    properties:
      id:
        type: string
        description: unique id of user
        example: "00000000-0000-0000-0000-000000000000"
      username:
        type: string
        minLength: 4
        maxLength: 20
        pattern: "^\\w+$"   # only allows alphanumeric characters
        description: username must be unique
        example: "username"
      password:
        type: string
        minLength: 8
        description: password
        example: "password"
      firstname:
        description: the user's real first name
        type: string
        minLength: 1
        example: "Jane"
      lastname:
        description: the user's real last name
        type: string
        minLength: 1
        example: "Doe"
      email:
        description: the user's email
        type: string
        example: "jane.doe@example.com"
      last_activity_date:
        type: string
        format: date-time
        description: when the user last logged in (set by the server)
        readOnly: true
        example: "1970-01-01 00:00:00"
      organizations:
        type: array
        x-omitempty: true
        description: Array of organizations a user is part of and their roles
        readOnly: true
        items:
          $ref: "#/definitions/OrganizationUser"

  OrganizationUser:
    description: user in an organization
    type: object
    properties:
      user_id:
        type: string
        description: unique id of user
        example: "00000000-0000-0000-0000-000000000000"
      organization_id:
        type: string
        description: unique id of organization
        example: "00000000-0000-0000-0000-000000000000"
      username:
        description: username for user
        type: string
        example: "username"
      organization_name:
        description: name of organization
        type: string
        example: "MyOrganization"
      role:
        $ref: "#/definitions/OrganizationRoles"

  Organization:
    description: Organization
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: unique id of organization
        example: "00000000-0000-0000-0000-000000000000"
      name:
        type: string
        minLength: 4
        maxLength: 20
        pattern: "^\\w+$"   # only allows alphanumeric characters
        description: organization name must be unique
      logo:
        description: Organization logo
        type: string
      description:
        description: Organization description
        type: string
      users:
        type: array
        x-omitempty: true
        items:
          $ref: '#/definitions/OrganizationUser'

  ArraySharing:
    description: details for sharing a given array
    type: object
    properties:
      actions:
        description: List of permitted actions
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/ArrayActions"
        example:
          - read
          - write
      namespace:
        description: namespace being granted array access can be a user or organization
        type: string
        example: "MyOrganization"
      namespace_type:
        description: details on if the namespace is a organization or user
        type: string
        example: "organization"

  ArrayMetadata:
    description: metadata of an array
    type: object
    properties:
      uri:
        description: uri of array
        type: string
        example: "s3://bucket/array"
      namespace:
        description: namespace array is in
        type: string
        example: "user1"
      size:
        description: size in bytes of array
        type: number
        format: uint64
        example: 1024
      last_accessed:
        description: Datetime array was last accessed in UTC
        type: string
        format: date-time
      description:
        description: description of array
        type: string
      name:
        description: description of array
        type: string
        example: myarray1
      allowed_actions:
        description: list of actions user is allowed to do on this array
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/ArrayActions"

  ArrayMetadataUpdate:
    description: metadata of an array
    type: object
    properties:
      description:
        description: description of array
        type: string
      name:
        description: description of array
        type: string
        example: myarray1
      uri:
        description: uri of array
        type: string
        example: "s3://bucket/array"

  TokenRequest:
    description: A request from a user for an api token
    type: object
    properties:
      expires:
        description: Expiration date for token, if empty token defaults to 30 minutes
        type: string
        format: date-time
        example: 2018-12-31T12:13:14Z
      name:
        description: Optional name for token, if the name already exists for the user it will be auto incremented (i.e. myToken-1)
        type: string
        example: myToken

  Token:
    description: A api token and its metadata
    type: object
    properties:
      token:
        description: A api token
        type: string
      name:
        description: Name of token to revoke
        type: string
      issued_at:
        description: datetime the token was created at
        type: string
        format: date-time
      expires_at:
        description: datetime the token when token will expire
        type: string
        format: date-time

  AWSAccessCredentials:
    description: Model representing aws keys or service role, service roles are currently ignored, but will be preferred option in the future
    type: object
    required:
      - secret_access_key
      - access_key_id
    properties:
      secret_access_key:
        type: string
        description: aws secret access key, never returned in get requests
      access_key_id:
        type: string
        description: aws access key
      service_role_arn:
        type: string
        description: aws service role to use for access
      name:
        type: string
        description: human readable name
      buckets:
        description: a whitelist of one or more buckets this key should access
        type: array
        x-omitempty: true
        items:
          type: string
          description: A bucket or path of a bucket that is granted access by these credentials
          example: "s3://company-bucket-1/tiledb/"
      created_at:
        description: Time when udf dependencies was created (rfc3339)
        type: string
        format: date-time
        readOnly: true
      updated_at:
        description: Time when udf dependencies was last updated (rfc3339)
        type: string
        format: date-time
        readOnly: true


paths:
  /.stats:
    get:
      description: Fetch libtiledb stat
      tags:
        - stats
      operationId: getTiledbStats
      responses:
        200:
          description: stats
          schema:
            type: object
            properties:
              stats:
                description: string of stats from tiledb
                type: string
                example: "123"
          examples:
            application/json:
              stats: "123"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays:
    get:
      description: get all array metadata user has access to
      tags:
        - array
      operationId: getAllArrayMetadata
      responses:
        200:
          description: array metadata for all arrays user has access to
          schema:
            type: array
            x-omitempty: true
            items:
              $ref: "#/definitions/ArrayMetadata"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
    get:
      description: get metadata on all arrays in a namespace
      tags:
        - array
      operationId: getArraysInNamespace
      responses:
        200:
          description: array metadata for all arrays in a namespace
          schema:
            type: array
            x-omitempty: true
            items:
              $ref: "#/definitions/ArrayMetadata"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
      - name: Content-Type
        in: header
        description: Content Type of input and return mime
        type: string
        required: true
        default: application/json
    delete:
      description: delete a array
      tags:
        - array
      operationId: deleteArray
      responses:
        204:
          description: delete array successful
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    get:
      description: get an ArraySchema using a url encoded uri
      produces:
        - application/json
        - application/capnp
      consumes:
        - application/json
        - application/capnp
      tags:
        - array
      operationId: getArray
      responses:
        200:
          description: get ArraySchema
          schema:
            $ref: "#/definitions/ArraySchema"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    post:
      description: create a array schema at a specified URI registered to a group/project
      tags:
        - array
      operationId: createArray
      parameters:
        - name: ArraySchema
          in: body
          description: ArraySchema being created
          schema:
            $ref: "#/definitions/ArraySchema"
          required: true
      responses:
        204:
          description: schema created successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}/metadata:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
    get:
      description: get metadata on an array
      tags:
        - array
      operationId: getArrayMetadata
      responses:
        200:
          description: array metadata for an array
          schema:
            $ref: "#/definitions/ArrayMetadata"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    patch:
      description: update metadata on an array
      tags:
        - array
      operationId: updateArrayMetadata
      parameters:
        - name: array_metadata
          in: body
          description: array metadata to update
          schema:
            $ref: "#/definitions/ArrayMetadataUpdate"
          required: true
      responses:
        204:
          description: array metadata updated successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}/register:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
    post:
      description: register an array at a specified URI registered to the given namespace
      tags:
        - array
      operationId: registerArray
      parameters:
        - name: array_metadata
          in: body
          description: metadata associated with array
          schema:
            $ref: "#/definitions/ArrayMetadataUpdate"
          required: true
      responses:
        204:
          description: schema registered successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}/share:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
    get:
      description: Get all sharing details of the array
      tags:
        - array
      operationId: getArraySharingPolicies
      responses:
        200:
          description: List of all specific sharing policies
          schema:
            type: array
            x-omitempty: true
            items:
              $ref: "#/definitions/ArraySharing"
        404:
          description: Array does not exist or user does not have permissions to view array sharing policies
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    patch:
      description: Share an array with a user
      tags:
        - array
      operationId: shareArray
      parameters:
        - name: array_sharing
          in: body
          description: Namespace and list of permissions to share with. An empty list of permissions will remove the namespace, if permissions already exist they will be deleted then new ones added. In the event of a failure, the new polcies will be rolled back to prevent partial policies, and its likely the array will not be shared with the namespace at all
          schema:
            $ref: "#/definitions/ArraySharing"
          required: true
      responses:
        204:
          description: Array shared successfully
        404:
          description: Array does not exist or user does not have permissions to share array
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}/non_empty_domain:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
    get:
      description: get the non empty domain of an array
      tags:
        - array
      operationId: getArrayNonEmptyDomain
      responses:
        200:
          description: get the non empty domain of an array
          schema:
            $ref: "#/definitions/NonEmptyDomain"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}/max_buffer_size:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
      - name: subarray
        in: query
        description: subarray to find max buffer size on
        type: array
        items:
          type: number
        required: true
      - name: attribute
        in: query
        description: attribute to fetch max buffer on, all non-variable sized attributes returned if not passed
        type: string
        required: false
    get:
      description: get the max buffer size needed for a subarray and a given attribute (or all non-variable sized attribute)
      tags:
        - array
      operationId: getArrayMaxBufferSize
      responses:
        200:
          description: get the max buffer size of a attribute
          schema:
            type: array
            x-omitempty: true
            items:
              $ref: "#/definitions/MaxBufferSizeVar"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}/max_buffer_size_var:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
      - name: subarray
        in: query
        description: subarray to find max variable-legnth buffer size on
        type: array
        items:
          type: number
        required: true
      - name: attribute
        in: query
        description: attribute to fetch max buffer on, all variable sized attributes returned if not passed
        type: string
        required: false
    get:
      description: get the max buffer size needed for a subarray and a given attribute (or all variable sized attribute)
      tags:
        - array
      operationId: getArrayMaxBufferSizeVar
      responses:
        200:
          description: get the max buffer size of a attribute
          schema:
            type: array
            x-omitempty: true
            items:
              $ref: "#/definitions/MaxBufferSizeVar"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
  /arrays/{namespace}/{array}/query/submit:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
      - name: type
        in: query
        description: type of query
        required: true
        type: string
      - name: Content-Type
        in: header
        description: Content Type of input and return mime
        type: string
        required: true
        default: application/json
    post:
      description: send a query to run against a specified array/URI registered to a group/project
      tags:
        - query
      produces:
        - application/json
        - application/capnp
      consumes:
        - application/json
        - application/capnp
      operationId: submitQuery
      parameters:
        - name: query
          in: body
          description: query to run
          schema:
            $ref: "#/definitions/Query"
          required: true
      responses:
        200:
          description: query completed and results are returned in query object
          schema:
            $ref: "#/definitions/Query"
        204:
          description: query completed successfully with no return
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/{namespace}/{array}/query/finalize:
    parameters:
      - name: namespace
        in: path
        description: namespace array is in (an organization name or user's username)
        type: string
        required: true
      - name: array
        in: path
        description: name/uri of array that is url-encoded
        type: string
        required: true
      - name: type
        in: query
        description: type of query
        required: true
        type: string
      - name: Content-Type
        in: header
        description: Content Type of input and return mime
        type: string
        required: true
        default: application/json
    post:
      description: send a query to run against a specified array/URI registered to a group/project
      tags:
        - query
      produces:
        - application/json
        - application/capnp
      consumes:
        - application/json
        - application/capnp
      operationId: finalizeQuery
      parameters:
        - name: query
          in: body
          description: query to run
          schema:
            $ref: "#/definitions/Query"
          required: true
      responses:
        200:
          description: query completed and results are returned in query object
          schema:
            $ref: "#/definitions/Query"
        204:
          description: query completed successfully with no return
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
  /user:
    get:
      tags:
        - user
      description: get a user
      operationId: getUser
      responses:
        200:
          description: user details
          schema:
            $ref: "#/definitions/User"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    post:
      security: []
      tags:
        - user
      description: create a user
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: user to create
          schema:
            $ref: "#/definitions/User"
          required: true
      responses:
        204:
          description: user created successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /users/{username}:
    parameters:
      - name: username
        in: path
        description: username or id
        required: true
        type: string
    get:
      tags:
        - user
      description: get a user
      operationId: getUserWithUsername
      responses:
        200:
          description: user details
          schema:
            $ref: "#/definitions/User"
        404:
          description: User does not exist
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - user
      description: delete a user
      operationId: deleteUser
      responses:
        204:
          description: user deleted
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
        - user
      description: update a user
      operationId: updateUser
      parameters:
        - name: user
          in: body
          description: user details to update
          schema:
            $ref: "#/definitions/User"
          required: true
      responses:
        204:
          description: user updated successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /credentials/{namespace}/aws:
    parameters:
      - name: namespace
        in: path
        description: namespace
        required: true
        type: string
    get:
      tags:
        - user
        - organization
      description: Check if aws keys are set
      operationId: checkAWSAccessCredentials
      responses:
        200:
          description: AWS keys are set
          schema:
            $ref: "#/definitions/AWSAccessCredentials"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - user
        - organization
      description: Add aws keys
      operationId: addAWSAccessCredentials
      parameters:
        - name: awsAccessCredentials
          in: body
          description: aws access credentials to store for a namespace
          schema:
            $ref: "#/definitions/AWSAccessCredentials"
          required: true
      responses:
        204:
          description: AWS keys added successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
        - user
        - organization
      description: Update aws keys or associated buckets. This will update the key associations for each array in the namespace
      operationId: updateAWSAccessCredentials
      parameters:
        - name: awsAccessCredentials
          in: body
          description: aws credentials to update
          schema:
            $ref: "#/definitions/AWSAccessCredentials"
          required: true
      responses:
        204:
          description: AWS keys updated successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - user
        - organization
      description: delete a AWS Access credentials in a namespace. This will likely cause arrays to become unreachable
      operationId: deleteAWSAccessCredentials
      responses:
        204:
          description: AWS credentials deleted
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /organization:
    post:
      tags:
        - organization
      description: create a organization, the user creating will be listed as owner
      operationId: createOrganization
      parameters:
        - name: organization
          in: body
          description: organization to create
          schema:
            $ref: "#/definitions/Organization"
          required: true
      responses:
        204:
          description: organization created successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /organizations/{organization}:
    parameters:
      - name: organization
        in: path
        description: organization name or id
        required: true
        type: string
    get:
      tags:
        - organization
      description: get a organization
      operationId: getOrganization
      responses:
        200:
          description: organization details
          schema:
            $ref: "#/definitions/Organization"
        404:
          description: Organization does not exist
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - organization
      description: delete a organization
      operationId: deleteOrganization
      responses:
        204:
          description: organization deleted
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
        - organization
      description: update a organization
      operationId: updateOrganization
      parameters:
        - name: organizationDetails
          in: body
          description: organization details to update
          schema:
            $ref: "#/definitions/Organization"
          required: true
      responses:
        204:
          description: organization updated successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /organizations/{organization}/user:
    parameters:
      - name: organization
        in: path
        description: organization name
        required: true
        type: string
    post:
      tags:
        - user
        - organization
      description: add a user to an organization
      operationId: addUserToOrganization
      parameters:
        - name: user
          in: body
          description: user to add
          schema:
            $ref: "#/definitions/OrganizationUser"
          required: true
      responses:
        204:
          description: user added to organization successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /organizations/{organization}/{username}:
    parameters:
      - name: organization
        in: path
        description: organization name
        required: true
        type: string
      - name: username
        in: path
        description: username to manipulate
        required: true
        type: string
    get:
      tags:
        - user
        - organization
      description: get a user from an organization
      operationId: getOrganizationUser
      responses:
        200:
          description: user from organization
          schema:
            $ref: "#/definitions/OrganizationUser"
        404:
          description: User is not in organization
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - user
        - organization
      description: delete a user from an organization
      operationId: deleteUserFromOrganization
      responses:
        204:
          description: user delete from organization successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    patch:
      tags:
        - user
        - organization
      description: update a user in an organization
      operationId: updateUserInOrganization
      parameters:
        - name: user
          in: body
          description: user details to update
          schema:
            $ref: "#/definitions/OrganizationUser"
          required: true
      responses:
        204:
          description: user update in organization successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /token:
    post:
      tags:
        - user
      description: Request an authorization token, optionally taken a TokenRequest object to set parameters on the token
      operationId: requestToken
      parameters:
        - name: tokenRequest
          in: body
          description: token request object
          schema:
            $ref: "#/definitions/TokenRequest"
          required: false
      responses:
        200:
          description: token
          schema:
            $ref: "#/definitions/Token"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
  /tokens:
    get:
      tags:
        - user
      description: Fetch a list of user tokens
      responses:
        200:
          description: Array of all user created tokens
          schema:
            type: array
            x-omitempty: true
            items:
              $ref: "#/definitions/Token"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /tokens/{token}:
    parameters:
      - name: token
        in: path
        description: token name or token itself
        required: true
        type: string
    delete:
      tags:
        - user
      description: revoke an authorization token
      operationId: revokeToken
      responses:
        204:
          description: revokation successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
